apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// See https://developer.android.com/studio/publish/app-signing#secure-shared-keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
try {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} catch (Exception ex) {
    logger.warn("No keys.  Release disabled: $ex.message")
    keystoreProperties['keyAlias'] = ''
    keystoreProperties['keyPassword'] = ''
    keystoreProperties['storeFile'] = '/dev/null'
    keystoreProperties['storePassword'] = ''
}

// Go backend build constants
def goSourceDir = "${projectDir}/src/go"
def goSourcePackages = ["${goSourceDir}/backend",
                        "${goSourceDir}/intra",
                        "${goSourceDir}/intra/split",
                        "${goSourceDir}/intra/protect"]
def goBuildDir = file("${buildDir}/go")
def goBackendAAR = file("${goBuildDir}/backend.aar")

// gomobile won't use the Go version in go.mod. So we need to manually read it from go.mod and
// explicitly set the GOTOOLCHAIN environment variable later.
def goModLines = new File("${rootDir}/../go.mod").readLines()
def goToolchain = goModLines.find { it.startsWith('toolchain ') }
if (goToolchain == null) {
    goToolchain = goModLines.find { it.startsWith('go ') }
    if (goToolchain == null) {
        throw new GradleException('cannot locate Go toolchain version in go.mod')
    }
}
// goToolchain: ['toolchain go1.x.y' or 'go 1.x.y'] -> 'go1.x.y'
goToolchain = goToolchain.replace("toolchain", "").replace(" ", "")
println "using Go toolchain ${goToolchain}"

// Standard Android build definition
android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION as int
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "app.intra"
        // Firebase Crashlytics requires SDK version 16.
        minSdkVersion ANDROID_MIN_SDK_VERSION as int
        targetSdkVersion ANDROID_TARGET_SDK_VERSION as int
        versionCode 68
        versionName "1.3.10"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    lintOptions {
        // Ignore lint errors that we believe are safe to ignore.
        baseline file("lint-baseline.xml")
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.config
            resValue("bool", "FIREBASE_ENABLED", "true")
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
        }
        debug {
            pseudoLocalesEnabled true
            resValue("bool", "FIREBASE_ENABLED", "false")
            // Split build across multiple dex files.  This is necessary mostly because Guava adds
            // so many classes that we exceed the dex limit (65536 methods).  This does not apply
            // to release builds, where unused classes are pruned.
            multiDexEnabled true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    maven {
        url 'test-repo'
    }
    maven {
        url '../gradle-plugin-repo'
    }
    maven {
        url '../firebase-repo'
    }
}

dependencies {
    implementation 'com.google.guava:guava:31.0.1-android'
    // Third-party test dependencies.
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.json:json:20180813'
    testImplementation 'org.mockito:mockito-core:2.13.0'
    // Required for instrumented tests
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    // UI libraries.
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    // For Firebase Analytics, etc.
    implementation 'com.google.firebase:firebase-analytics:19.0.2'  // Last version for API <19
    implementation 'com.google.firebase:firebase-perf:20.0.4'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.6'
    implementation 'com.google.firebase:firebase-crashlytics-ndk:18.2.6'
    implementation 'com.google.firebase:firebase-config:21.0.1'

    // Go backend (use fileTree instead of files to prevent Android Studio sync errors)
    implementation fileTree(goBuildDir) {
        include '*.aar'
        builtBy 'compileGoBackend'
    }
}

// For Firebase Analytics
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'

// Go backend build tasks
tasks.register('compileGoBackend', Exec) {
    dependsOn 'ensureGoMobile'

    // invoke gomobile to compile backend code
    inputs.dir(goSourceDir)
    outputs.file(goBackendAAR)

    environment 'GOTOOLCHAIN', goToolchain
    environment 'ANDROID_HOME', android.sdkDirectory
    environment 'PATH', goBuildDir.getPath() +
                        System.getProperty('path.separator') +
                        System.getenv('PATH')

    commandLine("${goBuildDir}/gomobile", 'bind',
                '-ldflags=-s -w',
                '-target=android',
                "-androidapi=${android.defaultConfig.minSdk}",
                '-o', goBackendAAR,
                *goSourcePackages)
}

tasks.register('ensureGoMobile', Exec) {
    // install gomobile and gobind into the build folder
    outputs.file("${goBuildDir}/gomobile")
    outputs.file("${goBuildDir}/gobind")

    doFirst { goBuildDir.mkdirs() }

    environment 'GOTOOLCHAIN', goToolchain

    commandLine('go', 'build',
                '-o', goBuildDir,
                'golang.org/x/mobile/cmd/gomobile',
                'golang.org/x/mobile/cmd/gobind')
}
